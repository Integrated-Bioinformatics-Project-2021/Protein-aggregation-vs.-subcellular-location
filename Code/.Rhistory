}
}
print(tango_scores)
View(tango_scores)
rm(tango_score)
rm(tango_scores)
# Get the average tango score for each subcellular location
tango_scores = vector("list", length = length(search_terms))
for (i in 1:length(search_terms)) {
given_protein_list = get_proteins_with_given_subcellular_location(search_terms[i])
if (! is.na(given_protein_list$wanted_proteins[1])) {
tango_scores[i] = get_average_tango_score(given_protein_list)
}
else {
tango_scores[i] = NA
}
}
print(tango_scores)
# TODO: make table with all scores for each subcellular location, also check if intra/extra
print(c(search_terms, tango_scores))
tango_scores = c()
tango_scores = c()
for (i in 1:length(search_terms)) {
given_protein_list = get_proteins_with_given_subcellular_location(search_terms[i])
if (! is.na(given_protein_list$wanted_proteins[1])) {
#tango_scores[i] = get_average_tango_score(given_protein_list)
tango_scores = append(tango_scores, get_average_tango_score(given_protein_list))
}
else {
#tango_scores[i] = NA
tango_scores = append(tango_scores, NA)
}
}
print(tango_scores)
# Get the average tango score for each subcellular location
tango_scores = c()
for (i in 1:length(search_terms)) {
given_protein_list = get_proteins_with_given_subcellular_location(search_terms[i])
if (! is.na(given_protein_list$wanted_proteins[1])) {
tango_scores = append(tango_scores, get_average_tango_score(given_protein_list))
}
else {
tango_scores = append(tango_scores, NA)
}
}
print(tango_scores)
# TODO: make table with all scores for each subcellular location, also check if intra/extra
print(c(search_terms, tango_scores))
# TODO: make table with all scores for each subcellular location, also check if intra/extra
barplot(tango_scores)
# TODO: make table with all scores for each subcellular location, also check if intra/extra
barplot(tango_scores, xlab = search_terms)
# TODO: make table with all scores for each subcellular location, also check if intra/extra
barplot(tango_scores, xlab = "subcellular location")
?barplot
# TODO: make table with all scores for each subcellular location, also check if intra/extra
barplot(tango_scores, xlab = "subcellular location", names.arg = search_terms)
library(ggplot2)
# TODO: make table with all scores for each subcellular location, also check if intra/extra
barplot(tango_scores, xlab = "subcellular location", names.arg = search_terms) # TODO: make it pretty ^_^
# TODO: make table with all scores for each subcellular location, also check if intra/extra
ggplot(tango_scores, xlab = "subcellular location", names.arg = search_terms) # TODO: make it pretty ^_^
# TODO: make table with all scores for each subcellular location, also check if intra/extra
barplot(tango_scores, xlab = "subcellular location", names.arg = search_terms) # TODO: make it pretty ^_^
#install.packages("UniprotR")
#install.packages("BiocManager")
#BiocManager::install("Biostrings")
#BiocManager::install("GenomicAlignments")
#install.packages("sjmisc")
#install.packages("hash")
# install.packages("dplyr")
install.packages("peptides")
#install.packages("UniprotR")
#install.packages("BiocManager")
#BiocManager::install("Biostrings")
#BiocManager::install("GenomicAlignments")
#install.packages("sjmisc")
#install.packages("hash")
# install.packages("dplyr")
install.packages("Peptides")
library(Peptides)
APR_peptides
FR_peptides
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_proteins = unique(peptides_name$Protein)
for (i in 1:length(unique_proteins)) {
protein_sequences[unique_proteins[i]$APRcount_tango] <- sum(unique_proteins[i]$Residue)
}
}
get_sequence(APR_peptides)
unique_proteins
unique_proteins
protein_sequences[unique_proteins[i]$APRcount_tango] <- paste(unique_proteins[i]$Residue, sep="")
protein_sequences = hash()
unique_proteins = unique(peptides_name$Protein)
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_proteins = unique(peptides_name$Protein)
for (i in 1:length(unique_proteins)) {
protein_sequences[unique_proteins$APRcount_tango[i]] <- paste(unique_proteins[i]$Residue, sep="")
}
}
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_proteins = unique(peptides_name$Protein)
for (i in 1:length(unique_proteins)) {
protein_sequences[unique_proteins$APRcount_tango[i]] <- paste(unique_proteins$Residue[i], sep="")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_proteins = unique(peptides_name$Protein)
for (i in 1:length(unique_proteins)) {
protein_sequences[unique_proteins$APRcount_tango[i]] <- paste(unique_proteins$Residue[i], sep="")
}
}
get_sequence(APR_peptides)
APR_peptides$Protein
unique_proteins = unique(APR_peptides$Protein)
i=1
protein_sequences[unique_proteins$APRcount_tango[i]] <- paste(unique_proteins$Residue[i], sep="")
unique_proteins
protein_sequences[peptides_name[Protein == unique_proteins]$APRcount_tango[i]] <- paste(unique_proteins$Residue[i], sep="")
peptides_name = APR_peptides
protein_sequences[peptides_name[Protein == unique_proteins]$APRcount_tango[i]] <- paste(unique_proteins$Residue[i], sep="")
peptides_name
peptides_name[Protein == unique_proteins]
peptides_name["Protein" == unique_proteins]
protein_sequences[peptides_name["Protein" == unique_proteins]$APRcount_tango[i]] <- paste(unique_proteins$Residue[i], sep="")
peptides_for_protein = subset(peptides_name, peptides_name$Protein == unique_proteins[i])
peptides_for_protein
protein_sequences[peptides_for_protein$APRcount_tango[i]] <- paste(unique_proteins$Residue[i], sep="")
peptides_for_protein$APRcount_tango
protein_sequences[peptides_for_protein$APRcount_tango] <- paste(unique_proteins$Residue[i], sep="")
peptides_for_protein
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
#protein_sequences[peptides_for_protein$APRcount_tango] <- paste(unique_proteins$Residue[i], sep="")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[peptides_for_APR[i]] <- paste(peptides_for_APR$Residue, sep="")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
protein_sequences[peptides_for_APR[i]] <- paste(peptides_for_APR$Residue, sep="")
}
}
get_sequence(APR_peptides)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
print(protein_sequences)
}
}
get_sequence(APR_peptides)
APR_peptides
View(APR_peptides)
print(peptides_for_APR)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
print(protein_sequences[unique_APRs[i]])
print("-------")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
print(protein_sequences$unique_APRs[i])
print("-------")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = tostring(unique_APRs[i])
print(protein_sequences$key)
print("-------")
}
}
get_sequence(APR_peptides)
key = toString(unique_APRs[i])
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = toString(unique_APRs[i])
print(protein_sequences$key)
print("-------")
}
}
get_sequence(APR_peptides)
protein_sequences
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = toString(unique_APRs[i])
print(keys(protein_sequences))
print(protein_sequences$key)
print("-------")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = toString(unique_APRs[i])
print(keys(protein_sequences))
print(key)
print(protein_sequences$key)
print("-------")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = toString(unique_APRs[i])
value = protein_sequences$key
print(value)
print("-------")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
#print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = toString(unique_APRs[i])
value = protein_sequences$key
print(value)
print("-------")
}
}
get_sequence(APR_peptides)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
?unite
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
#print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = toString(unique_APRs[i])
value = protein_sequences[[key]]
print(value)
print("-------")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, sep="")
key = toString(unique_APRs[i])
value = protein_sequences[[key]]
print(value)
print("-------")
}
}
get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, collapse = "")
key = toString(unique_APRs[i])
value = protein_sequences[[key]]
print(value)
print("-------")
}
}
get_sequence(APR_peptides)
View(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
print(peptides_for_APR)
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, collapse = "")
}
return (protein_sequences)
}
protein_sequences = get_sequence(APR_peptides)
get_sequence <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
protein_sequences[unique_APRs[i]] <- paste(peptides_for_APR$Residue, collapse = "")
}
return (protein_sequences)
}
protein_sequences = get_sequence(APR_peptides)
protein_sequences
View(APR_peptides)
get_charge <- function(peptides_name) {
protein_sequences = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_sequences[unique_APRs[i]] <- charge(sequence)
}
return (protein_sequences)
}
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence)
print(protein_charges[[unique_APRs[i]]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_sequence(APR_peptides)
protein_sequences_APR_peptides = get_charge(APR_peptides)
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence)
key = unique_APRs[i]
print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_charge(APR_peptides)
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence)
key = toString(unique_APRs[i])
print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_charge(APR_peptides)
?charge
?Peptides.charge
??Peptides.charge
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence, pH = 1)
key = toString(unique_APRs[i])
print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_charge(APR_peptides)
# For every APR in the list peptides_name, calculate the net charge
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence, pH = 5)
#key = toString(unique_APRs[i])
#print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_charge(APR_peptides)
# For every APR in the list peptides_name, calculate the net charge
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence, pH = 5)
key = toString(unique_APRs[i])
print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_charge(APR_peptides)
# For every APR in the list peptides_name, calculate the net charge
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence, pH = 8)
key = toString(unique_APRs[i])
print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_charge(APR_peptides)
protein_sequences_GK_peptides = get_charge(GK_peptides)
# For every APR in the list peptides_name, calculate the net charge
get_charge <- function(peptides_name) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence)
key = toString(unique_APRs[i])
print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_GK_peptides = get_charge(GK_peptides)
protein_sequences_FR_peptides = get_charge(FR_peptides)
# For every APR in the list peptides_name, calculate the net charge
get_charge <- function(peptides_name, ph = 7) {
protein_charges = hash()
unique_APRs = unique(peptides_name$APRcount_tango)
for (i in 1:length(unique_APRs)) {
peptides_for_APR = subset(peptides_name, peptides_name$APRcount_tango == unique_APRs[i])
sequence = paste(peptides_for_APR$Residue, collapse = "")
protein_charges[unique_APRs[i]] <- charge(sequence, pH = ph)
key = toString(unique_APRs[i])
print(protein_charges[[key]])
}
return (protein_charges)
}
protein_sequences_APR_peptides = get_charge(APR_peptides)
protein_sequences_APR_peptides = get_charge(APR_peptides, 1)
protein_sequences_APR_peptides = get_charge(APR_peptides)
histogram(protein_sequences_APR_peptides)
hist(protein_sequences_APR_peptides)
barplot(protein_sequences_APR_peptides)
